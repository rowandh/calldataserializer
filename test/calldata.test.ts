import { parse } from '../src';

describe('deserialize', () => {

  it('should have the correct data', () => {
    // vmversion 1, gasprice 18446744073709551615, gaslimit 18446744073709551615, some code and method params
    let oo = "c0";
    let vmversion = "0100";
    let gasprice = "ffffffffffffffff";
    let gasLimit = "ffffffffffffffff";
    let hex = "c001000000fffffffffffffffffffffffffffffffff9018cb901660d0a202020202020202020202020202020207573696e672053797374656d3b0d0a202020202020202020202020202020207573696e6720537472617469732e536d617274436f6e7472616374733b0d0a202020202020202020202020202020205b5265666572656e6365735d0d0a0d0a202020202020202020202020202020207075626c696320636c6173732054657374203a20536d617274436f6e74726163740d0a202020202020202020202020202020207b200d0a20202020202020202020202020202020202020207075626c696320766f696420546573744d6574686f6428696e74206f72646572732c20626f6f6c2063616e4f72646572290d0a20202020202020202020202020202020202020207b0d0a2020202020202020202020202020202020202020202020205b436f6465546f457865637574655d0d0a20202020202020202020202020202020202020207d0d0a202020202020202020202020202020207da2e1820101870474657c737c74860474652373748a0423342374652373742383032300";
    let txData = parse(hex)
    let opcode = new Uint8Array([192]);

    expect(txData.opCodeType).toEqual(opcode);
    expect(txData.gasPrice).toEqual(BigInt("0x" + gasprice));
    expect(txData.gasLimit).toEqual(BigInt("0x" + gasLimit));
  });
});